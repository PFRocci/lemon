#! /usr/bin/env python

# Copyright (c) 2012 Victor Terron. All rights reserved.
# Institute of Astrophysics of Andalusia, IAA-CSIC
#
# This file is part of LEMON.
#
# LEMON is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Use import hooks, which are added to sys.meta_path, to enforce
# a minimum version of the modules defined in requirements.txt.
import check_versions

import atexit
import difflib
import logging
import os.path
import sys

# LEMON module
import methods

LEMON_COMMANDS = ['import', 'seeing', 'offsets', 'mosaic', 'astrometry',
                  'annuli', 'photometry', 'diffphot', 'periods', 'juicer']

def show_help(name):
    """ Help message, listing all commands, that looks like Git's """

    print "usage: %s [--help] COMMAND [ARGS]" % name
    print
    print "The available commands are:"
    print "   import       Group the images of an observing campaign"
    print "   seeing       Identify image with best astronomical seeing"
    print "   astrometry   Calibrate the images astrometrically"
    print "   mosaic       Assemble the images into a mosaic"
    print "   annuli       Find optimal parameters for photometry"
    print "   photometry   Perform aperture photometry"
    print "   diffphot     Generate light curves"
    print "   periods      Dworetsky's string-length method"
    print "   juicer       LEMONdB browser and variability analyzer"
    print
    print "See '%s COMMAND' for more information on a specific command." % name

if __name__ == "__main__":

    name = os.path.basename(sys.argv[0])
    revision = methods.get_git_revision()

    if len(sys.argv) == 1 or '--help' in sys.argv:
        show_help(name)

    elif '--version' in sys.argv:
        print revision
        sys.exit(0)

    else:

        # Register logging.info() to be executed at termination, so that the
        # Git revision number is logged at INFO level before our program
        # exits. The reason why we do it on exit, instead of now, is because
        # the logger level has not yet been adjusted. We need to wait until the
        # main() method of the module that we are going to import counts the
        # number of -v options and sets the level to WARNING, INFO or DEBUG.
        msg = "LEMON Git revision: %s" % revision
        atexit.register(logging.info, msg)

        command = sys.argv[1]
        args = sys.argv[2:]

        if command not in LEMON_COMMANDS:
            msg = "%s: '%s' is not a lemon command. See 'lemon --help'."
            print msg % (name, command)

            # Show suggestions, if any, when the command does not exist
            matches = difflib.get_close_matches(command, LEMON_COMMANDS)
            if matches:
                print
                print "Did you mean" ,
                print len(matches) == 1 and "this?" or "one of these?"
                for match in matches:
                    print ' ' * 8 + match

            sys.exit(1)

        elif command == 'juicer':
            import juicer.main
            kwargs = {}
            if args:
                kwargs['db_path'] = args[0]
            juicer.main.main(**kwargs)

        else:

            # Add the name of the command to the script name so that the brief
            # summary of the imported script options includes it (for example,
            # "lemon photometry" instead of just "lemon".

            sys.argv[0] = "%s %s" % (name, command)

            # The 'import' statement cannot be used as the name of the module
            # is only known at runtime. We need to manually invoke __import__
            # to import the module by name and then run its main() function.

            module = __import__(command)
            module.main(args)

